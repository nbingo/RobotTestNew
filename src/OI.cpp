// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DriveNormal.h"
#include "Commands/DriveStraight.h"
#include "Commands/Intake.h"
#include "Commands/Shoot.h"
#include "Commands/moveServos.h"
#include "Commands/moveArm.h"
#include "Commands/WinchUp.h"
#include "Commands/LiftGripper.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveJoy.reset(new Joystick(0));
    otherJoy.reset(new Joystick(1));
    
    moveArmButton.reset(new JoystickButton(otherJoy.get(), 1));
    moveArmButton->WhileHeld(new moveArm());
    liftGripperButton.reset(new JoystickButton(otherJoy.get(), 3));
    liftGripperButton->WhileHeld(new LiftGripper());
    winchUpButton.reset(new JoystickButton(otherJoy.get(), 2));
    winchUpButton->WhileHeld(new WinchUp());

    moveServoButton.reset(new JoystickButton(driveJoy.get(), 3));
    moveServoButton->WhileHeld(new moveServos());

    shootButton.reset(new JoystickButton(driveJoy.get(), 5));
    shootButton->WhileHeld(new Shoot());

    intakeButton.reset(new JoystickButton(driveJoy.get(), 6));
    intakeButton->WhileHeld(new Intake());
    //changed intake button to override and use the same button as the other thing, if it doesn't work again check that out because that was the issue sometimes

    driveStraightButton.reset(new JoystickButton(driveJoy.get(), 2));
    driveStraightButton->WhileHeld(new DriveStraight());

    driveNormalButton.reset(new JoystickButton(driveJoy.get(), 1));
    driveNormalButton->WhileHeld(new DriveNormal());

    // SmartDashboard Buttons
    SmartDashboard::PutData("moveArm", new moveArm());
    SmartDashboard::PutData("WinchUp", new WinchUp());
    SmartDashboard::PutData("LiftGripper", new LiftGripper());
    SmartDashboard::PutData("AutonomousCommand", new AutonomousCommand());
    SmartDashboard::PutData("Shoot", new Shoot());
    SmartDashboard::PutData("Intake", new Intake());
    SmartDashboard::PutData("DriveStraight", new DriveStraight());
    SmartDashboard::PutData("DriveNormal", new DriveNormal());
    SmartDashboard::PutData("moveServos", new moveServos());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriveJoy() {
   return driveJoy;
}

std::shared_ptr<Joystick> OI::getOtherJoy() {
   return otherJoy;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

float OI::GetDriveY() {
	return driveJoy->GetRawAxis(1);
}

float OI::GetDriveX() {
	return driveJoy->GetRawAxis(0);
}

float OI::GetIntakeY() {
	return driveJoy->GetRawAxis(5);
	//right num now??
}
float OI::GetThrot() {
	return driveJoy->GetRawAxis(2);
}
float OI::GetThrot2() {
	return driveJoy->GetRawAxis(3);
}

float OI::GetOtherY1() {
	return otherJoy->GetRawAxis(1);
}

float OI::GetOtherY2() {
	return otherJoy->GetRawAxis(5);
	//before got the joysticks from the wrong joystick oops. may have been the error
}

float OI::GetOtherX1() {
	return otherJoy->GetRawAxis(0);
}

float OI::GetOtherX2() {
	return otherJoy->GetRawAxis(0);
}


