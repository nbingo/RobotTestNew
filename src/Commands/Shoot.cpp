// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//#define reverseEn

#include "Shoot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Shoot::Shoot(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooterSystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Shoot::Initialize() {
	Robot::shooterSystem->ShootLeft(0);
	Robot::shooterSystem->ShootRight(0);
}

// Called repeatedly when this Command is scheduled to run
void Shoot::Execute() {
	double value=1;

#ifdef reverseEn
	if (Robot::oi->GetThrot2()>0)
	{
		Robot::shooterSystem->ShootLeft(-1*Robot::oi->GetThrot2()/5.0);
		Robot::shooterSystem->ShootRight(Robot::oi->GetThrot2()/5.0);
		Wait(.01);
	}
	if (Robot::oi->GetThrot()!=0)
	{
		Robot::shooterSystem->ShootLeft(value);
		Robot::shooterSystem->ShootRight(-1*value);
		Wait(.01);
	}

#endif
	Robot::shooterSystem->ShootLeft(value);
	Robot::shooterSystem->ShootRight(-1*value);
}

// Make this return true when this Command no longer needs to run execute()
bool Shoot::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Shoot::End() {
	Robot::shooterSystem->ShootLeft(0);
	Robot::shooterSystem->ShootRight(0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Shoot::Interrupted() {
	Robot::shooterSystem->ShootLeft(0);
	Robot::shooterSystem->ShootRight(0);
}
